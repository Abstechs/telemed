import{initializeApp as m}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-app.js";import{getAnalytics as g}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-analytics.js";import{getAuth as h,fetchSignInMethodsForEmail as y,createUserWithEmailAndPassword as A,signInWithEmailAndPassword as b,onAuthStateChanged as w,signOut as I}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-auth.js";import{getFirestore as L,setDoc as O,doc as f,serverTimestamp as d,getDoc as P,addDoc as l,collection as p}from"https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const c of s.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&n(c)}).observe(document,{childList:!0,subtree:!0});function o(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerPolicy&&(s.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?s.credentials="include":e.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(e){if(e.ep)return;e.ep=!0;const s=o(e);fetch(e.href,s)}})();const S={apiKey:"AIzaSyAtDsSSp-YF-aQrRrpb0y4Cc-DnZc2nseA",authDomain:"telemed-0.firebaseapp.com",projectId:"telemed-0",storageBucket:"telemed-0.firebasestorage.app",messagingSenderId:"355517575874",appId:"1:355517575874:web:d6dc8e4a813dd3016fc15b",measurementId:"G-LWHE5TWF64",databaseURL:"https://telemed-0-default-rtdb.firebaseio.com"},u=m(S);let C;try{C=g(u)}catch{}const i=h(u),a=L(u);async function W(r,t,o){const n=await A(i,r,t),e=n.user;return await O(f(a,"users",e.uid),{uid:e.uid,email:r,role:o,createdAt:d()}),n}async function v(r,t){return await b(i,r,t)}async function M(){return await I(i)}async function N(r){const t=await y(i,r);return t&&t.length>0}function U(r){return w(i,async t=>{if(!t)return r(null);const o=await P(f(a,"users",t.uid)),n=o.exists()?o.data():null;r({user:t,profile:n})})}async function x(r){return(await l(p(a,"cases"),{...r,status:r.status||"pending",createdAt:d()})).id}async function z(r,t,o){const n=`chats/${r}/messages`;return(await l(p(a,n),{from:t,text:o,createdAt:d()})).id}export{v as a,M as b,x as c,a as d,z as e,i as f,N as i,U as o,W as s};
